blueprint:
  name: Dreame Multi-Room Cleaning
  description: Configurable room cleaning with multiple room selection
  domain: automation
  input:
    rooms:
      name: Rooms to Clean
      description: Select the rooms to clean
      selector:
        select:
          multiple: true
          options:
            - label: "Room 1"
              value: "1"
            - label: "Living Room"
              value: "2"
            - label: "Bathroom"
              value: "3"
            - label: "Table"
              value: "4"
            - label: "Kitchen"
              value: "5"
            - label: "Dining Room"
              value: "6"
            - label: "Dining Hall"
              value: "7"
            - label: "Pantry"
              value: "8"
    
    suction_level:
      name: Suction Level
      description: Suction level for cleaning (0-3)
      default: 1
      selector:
        number:
          min: 0
          max: 3
          step: 1
          mode: slider

    mop_after:
      name: Mop After Vacuum
      description: Run mopping cycle after vacuuming
      default: false
      selector:
        boolean:

trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: script
      service: clean_room

variables:
  selected_rooms: "{{ input.rooms }}"
  
action:
  # Initial status
  - service: mqtt.publish
    data:
      topic: home/vacuum/status
      payload: >
        {
          "room_clean": "started",
          "rooms": {{ input.rooms | tojson }},
          "mop_after": {{ input.mop_after | tojson }}
        }

  # Vacuum phase
  - service: select.select_option
    target:
      entity_id: select.orbit_cleaning_mode
    data:
      option: sweeping

  # Clean rooms
  - service: dreame_vacuum.vacuum_clean_segment
    target:
      entity_id: vacuum.orbit
    data:
      segments: "{{ input.rooms }}"
      suction_level: "{{ input.suction_level }}"
      repeats: 1

  - wait_template: >
      {% set task_state = states('sensor.orbit_task_status') %}
      {{ task_state == 'completed' }}
    continue_on_timeout: false

  # Mop phase if requested
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ input.mop_after }}"
        sequence:
          - delay:
              seconds: 15
          - service: select.select_option
            target:
              entity_id: select.orbit_cleaning_mode
            data:
              option: mopping
          - service: dreame_vacuum.vacuum_clean_segment
            target:
              entity_id: vacuum.orbit
            data:
              segments: "{{ input.rooms }}"
              repeats: 1
          - wait_template: >
              {% set task_state = states('sensor.orbit_task_status') %}
              {{ task_state == 'completed' }}
            continue_on_timeout: false

  # Final status
  - service: mqtt.publish
    data:
      topic: home/vacuum/status
      payload: >
        {
          "room_clean": "completed",
          "rooms": {{ input.rooms | tojson }}
        }

mode: single
