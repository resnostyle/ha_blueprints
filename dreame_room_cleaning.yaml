blueprint:
  name: Dreame Multi-Room Cleaning
  description: Advanced room cleaning with multiple room selection, scheduling, and smart features
  domain: automation
  input:
    rooms:
      name: Rooms to Clean
      description: Select the rooms to clean
      selector:
        select:
          multiple: true
          options:
            - label: "Room 1"
              value: "1"
            - label: "Living Room"
              value: "2"
            - label: "Bathroom"
              value: "3"
            - label: "Table"
              value: "4"
            - label: "Kitchen"
              value: "5"
            - label: "Dining Room"
              value: "6"
            - label: "Dining Hall"
              value: "7"
            - label: "Pantry"
              value: "8"
    
    cleaning_order:
      name: Room Cleaning Order
      description: Choose how rooms should be cleaned
      default: sequential
      selector:
        select:
          options:
            - label: "Sequential (As Listed)"
              value: "sequential"
            - label: "Optimized Path"
              value: "optimized"
            - label: "Random"
              value: "random"

    suction_level:
      name: Suction Level
      description: Suction level for cleaning (0-3)
      default: 1
      selector:
        number:
          min: 0
          max: 3
          step: 1
          mode: slider

    room_repeats:
      name: Room Cleaning Repeats
      description: Number of times to clean each room
      default: 1
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: box

    mop_after:
      name: Mop After Vacuum
      description: Run mopping cycle after vacuuming
      default: false
      selector:
        boolean:

    mop_water_level:
      name: Mop Water Level
      description: Water usage level for mopping (1-3)
      default: 2
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: slider

    pause_trigger:
      name: Pause Trigger Entity
      description: Entity that will trigger the vacuum to return home when active
      selector:
        entity:
          domain:
            - binary_sensor
            - input_boolean
            - sensor

    wait_time:
      name: Wait Time
      description: Time to wait (in minutes) before resuming after trigger clears
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: minutes

    battery_minimum:
      name: Minimum Battery Level
      description: Return to dock if battery falls below this level
      default: 20
      selector:
        number:
          min: 10
          max: 50
          step: 5
          unit_of_measurement: "%"

    notify_start:
      name: Notify on Start
      description: Send notification when cleaning starts
      default: false
      selector:
        boolean:

    notify_complete:
      name: Notify on Complete
      description: Send notification when cleaning completes
      default: false
      selector:
        boolean:

    notify_error:
      name: Notify on Error
      description: Send notification on errors or interruptions
      default: true
      selector:
        boolean:

    clean_dock:
      name: Clean Dock After
      description: Clean the charging dock after completing all rooms
      default: false
      selector:
        boolean:

trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: script
      service: clean_room

variables:
  selected_rooms: "{{ input.rooms }}"
  cleaning_position: []
  error_count: 0
  max_retries: 3
  
action:
  # Validate preconditions
  - condition: and
    conditions:
      - condition: template
        value_template: >
          {{ states('vacuum.orbit') != 'error' }}
      - condition: template
        value_template: >
          {{ states('sensor.orbit_water_tank') != 'absent' 
             if input.mop_after else true }}
      - condition: template
        value_template: >
          {{ states('sensor.orbit_battery_level') | float > 
             input.battery_minimum | float }}

  # Initial notifications
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ input.notify_start }}"
        sequence:
          - service: notify.mobile_app
            data:
              message: "Starting to clean {{ input.rooms | length }} rooms"
              data:
                push:
                  category: "vacuum_start"

  # Initial status
  - service: mqtt.publish
    data:
      topic: home/vacuum/status
      payload: >
        {
          "room_clean": "started",
          "rooms": {{ input.rooms | tojson }},
          "mop_after": {{ input.mop_after | tojson }},
          "cleaning_order": "{{ input.cleaning_order }}"
        }

  # Prepare room order
  - variables:
      ordered_rooms: >
        {% if input.cleaning_order == 'sequential' %}
          {{ input.rooms }}
        {% elif input.cleaning_order == 'random' %}
          {{ input.rooms | shuffle }}
        {% else %}
          {{ input.rooms | sort }}
        {% endif %}

  # Main cleaning sequence with error handling
  - repeat:
      sequence:
        # Check battery level
        - condition: template
          value_template: >
            {{ states('sensor.orbit_battery_level') | float > 
               input.battery_minimum | float }}
        
        # Vacuum phase
        - service: select.select_option
          target:
            entity_id: select.orbit_cleaning_mode
          data:
            option: sweeping

        # Clean rooms with pause monitoring
        - repeat:
            for_each: "{{ ordered_rooms }}"
            sequence:
              - service: dreame_vacuum.vacuum_clean_segment
                target:
                  entity_id: vacuum.orbit
                data:
                  segments: "{{ repeat.item }}"
                  suction_level: "{{ input.suction_level }}"
                  repeats: "{{ input.room_repeats }}"

              # Monitor for triggers and errors
              - parallel:
                  - wait_template: >
                      {% set task_state = states('sensor.orbit_task_status') %}
                      {{ task_state == 'completed' }}
                    continue_on_timeout: false
                    timeout: 
                      minutes: 30
                  - sequence:
                      # Check pause trigger
                      - wait_template: "{{ states(input.pause_trigger) == 'on' }}"
                        continue_on_timeout: true
                        timeout:
                          minutes: 30
                      - service: vacuum.pause
                        target:
                          entity_id: vacuum.orbit
                      - service: vacuum.return_to_base
                        target:
                          entity_id: vacuum.orbit
                      # Wait for trigger to clear
                      - wait_template: "{{ states(input.pause_trigger) == 'off' }}"
                      - delay:
                          minutes: "{{ input.wait_time }}"
                      # Resume from last position
                      - service: vacuum.send_command
                        target:
                          entity_id: vacuum.orbit
                        data:
                          command: app_goto_target
                          params: "{{ cleaning_position }}"

        # Mop phase if requested
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ input.mop_after }}"
                - condition: template
                  value_template: >
                    {{ states('sensor.orbit_water_tank') != 'absent' }}
              sequence:
                - delay:
                    seconds: 15
                - service: select.select_option
                  target:
                    entity_id: select.orbit_cleaning_mode
                  data:
                    option: mopping
                - repeat:
                    for_each: "{{ ordered_rooms }}"
                    sequence:
                      - service: dreame_vacuum.vacuum_clean_segment
                        target:
                          entity_id: vacuum.orbit
                        data:
                          segments: "{{ repeat.item }}"
                          water_level: "{{ input.mop_water_level }}"
                          repeats: 1

        # Clean dock if requested
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ input.clean_dock }}"
              sequence:
                - service: vacuum.send_command
                  target:
                    entity_id: vacuum.orbit
                  data:
                    command: clean_dock

      until:
        - condition: template
          value_template: "{{ error_count >= max_retries }}"
        - condition: template
          value_template: >
            {% set task_state = states('sensor.orbit_task_status') %}
            {{ task_state == 'completed' }}

  # Final status and notifications
  - service: mqtt.publish
    data:
      topic: home/vacuum/status
      payload: >
        {
          "room_clean": "completed",
          "rooms": {{ input.rooms | tojson }},
          "error_count": {{ error_count }}
        }

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ input.notify_complete }}"
        sequence:
          - service: notify.mobile_app
            data:
              message: "Completed cleaning {{ input.rooms | length }} rooms"
              data:
                push:
                  category: "vacuum_complete"

mode: single
